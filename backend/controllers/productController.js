const Product=require('../models/Product');
const express=require('express');
const router=express.Router();
const{verifyToken}=require('../config/jwt');
const{isAdmin}=require('../middleware/authMiddleware')
// Get All Products: GET /api/products

const getProducts = async (req, res) => {
  try {
    const query = {};
    const sortOptions = {};

    // 1. Search filter (by name and category)
    if (req.query.search) {
      query.$or = [
        { name: { $regex: req.query.search, $options: 'i' } },
        { category: { $regex: req.query.search, $options: 'i' } },
        { brand: { $regex: req.query.search, $options: 'i' } }
      ];
    }

    // 2. Rating filter (e.g., show products with rating >= value)
    if (req.query.rating) {
      query.rating = { $gte: Number(req.query.rating) };
    }

    // 3. Price range filter (e.g., price between minPrice and maxPrice)
    if (req.query.minPrice || req.query.maxPrice) {
      query.price = {};
      if (req.query.minPrice) {
        query.price.$gte = Number(req.query.minPrice);
      }
      if (req.query.maxPrice) {
        query.price.$lte = Number(req.query.maxPrice);
      }
    }
    
    // 4. Sorting logic
    switch (req.query.sort) {
      case 'price_asc':
        sortOptions.price = 1;
        break;
      case 'price_desc':
        sortOptions.price = -1;
        break;
      case 'rating_desc':
        sortOptions.rating = -1;
        break;
      default:
        sortOptions.createdAt = -1; // Default sort by newest
    }

    const products = await Product.find(query).sort(sortOptions);
    res.status(200).json({ products });

  } catch (error) {
    console.error(error.message);
    res.status(500).json({ message: 'Server error while fetching products.' });
  }
};

// Get Single Product: GET /api/products/:id

const getProductById=async (req,res)=>{
    
    try {
        const {id}=req.params;
        const product=await Product.findById(id);
        if(!product){
            return res.status(404).json({message:'Product not found'});
        }
        return res.status(200).json({message:'product fetch successfully',product:product});
    } catch (error) {
        console.error(error);
        return res.status.status(500).json({message:'Failed to fecth product try again!'});
    }
};


// Create Product: POST /api/products (Admin only). 

const createProduct = async (req, res) => {
    // Text fields come from req.body
    const { name, description, price, category, brand, countInStock, keyFeatures } = req.body;
    
    // --- Image Handling ---
    // Files come from req.files (an array generated by Multer)
    if (!req.files || req.files.length === 0) {
        return res.status(400).json({ message: 'You must upload at least one product image.' });
    }
    // Map through the files array to get their saved paths
    const images = req.files.map(file => file.path);

    try {
        // Check basic required fields from text data
        if (!name || !description || !price || !category || !brand || !countInStock) {
            return res.status(400).json({ message: 'Please fill all required fields.' });
        }

        const productExists = await Product.findOne({ name });
        if (productExists) {
            return res.status(409).json({ message: 'Product with this name already exists.' });
        }

        const product = await Product.create({
            name,
            description,
            price: Number(price),
            category,
            brand,
            countInStock: Number(countInStock),
            keyFeatures: keyFeatures, // Ensure frontend sends this as an array or parse a string
            image: images // Save the array of image paths here
        });

        res.status(201).json({ message: 'Product added successfully', product: product });

    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: 'Failed to add product. Please try again.' });
    }
};

// Update Product: PUT /api/products/:id (Admin only)
const updateProduct = async (req, res) => {
    try {
        const { id } = req.params;
        const { name, description, price, category, brand, countInStock, keyFeatures } = req.body;

        const product = await Product.findById(id);
        if (!product) {
            return res.status(404).json({ message: 'Product not found' });
        }

        // Update text fields
        product.name = name || product.name;
        product.description = description || product.description;
        product.price = price || product.price;
        product.category = category || product.category;
        product.brand = brand || product.brand;
        product.countInStock = countInStock || product.countInStock;
        if (keyFeatures) product.keyFeatures = keyFeatures;

        // --- Image Update Logic ---
        // If new images are uploaded during update, replace the old image array.
        if (req.files && req.files.length > 0) {
            const newImages = req.files.map(file => file.path);
            product.image = newImages;
        }

        const updatedProduct = await product.save();
        res.status(200).json({ message: 'Product updated successfully', product: updatedProduct });

    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: 'Error updating product. Please try again.' });
    }
};

// Delete Product: DELETE /api/products/:id (Admin only)
const deleteProduct=async(req,res)=>{
    try {
        const{id}=req.params;
        const product=await Product.findById(id);
        if(!product){
            return res.status(404).json({message:'Product not found'});
        }
        await Product.deleteOne({_id:id});
        
            return res.status(200).json({message:'Product deleted Successfully'})
        
    } catch (error) {
        console.error(error);
        return res.status(500).json({message:'Error deleting product try again'});
    }
};
const featuredProducts=async(req,res)=>{
    try {
        const products=await Product.find({rating:{$gte:4}}).limit(18);
        return res.status(200).json({message:'Featured products fetched successfully',products});
    } catch (error) {
        console.error(error.message);
        return res.status(500).json({message:'Internal Server error try again'});
    }
};
// backend/controllers/productController.js

/**
 * @desc    Get all products that are low in stock (Admin only)
 * @route   GET /api/products/low-stock
 * @access  Private/Admin
 */
const getLowStockProducts = async (req, res) => {
    try {
        const lowStockThreshold = 10; // Define what you consider "low stock"
        const products = await Product.find({ countInStock: { $lte: lowStockThreshold } })
                                      .sort({ countInStock: 1 }); // Show out of stock items first
        
        res.status(200).json({ products });
    } catch (error) {
        console.error(error.message);
        res.status(500).json({ message: 'Server error while fetching low stock products.' });
    }
};


module.exports={getProducts,getProductById,createProduct,deleteProduct,updateProduct,featuredProducts,getLowStockProducts}